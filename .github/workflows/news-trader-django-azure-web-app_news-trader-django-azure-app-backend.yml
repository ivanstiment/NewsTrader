# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - news-trader-django-azure-app-backend

env:
  DEBUG: False
  DJANGO_PRODUCTION: 1
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DBUSER: ${{ secrets.DBUSER }}
  DBPASS: ${{ secrets.DBPASS }}
  DBNAME: ${{ secrets.DBNAME }}
  DBHOST: ${{ secrets.DBHOST }}
  CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
  CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
  WEBSITE_HOSTNAME: ${{ vars.WEBSITE_HOSTNAME }}
  FRONTEND_URL: ${{ vars.FRONTEND_URL }}

on:
  push:
    branches:
      - news-trader-django-azure-web-app
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.3"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Clean residual Python files
        run: |
          echo "🧹 Limpiando archivos .pyc y __pycache__..."
          find . -name "*.pyc" -exec rm -f {} +
          find . -name "__pycache__" -type d -exec rm -rf {} +
          echo "🧹 Eliminando db.sqlite3 si existe..."
          find . -name "db.sqlite3" -exec rm -f {} + || true

      - name: Setup WebJob with proper Azure structure
        run: |
          echo "🔧 Configurando WebJob para Azure App Service..."
          
          # Crear estructura correcta para Azure WebJobs
          mkdir -p App_Data/jobs/continuous/celeryworker
          
          # Script optimizado para Azure App Service
          cat > App_Data/jobs/continuous/celeryworker/run.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "=== Azure WebJob Celery Worker ==="
          echo "Timestamp: $(date)"
          echo "Current directory: $(pwd)"
          echo ""
          
          # Azure App Service paths
          SITE_ROOT="/home/site/wwwroot"
          
          # Check if we're in the correct location
          if [ -d "$SITE_ROOT" ]; then
              echo "✅ Detected Azure App Service environment"
              cd "$SITE_ROOT"
          else
              echo "🔍 Searching for application directory..."
              # Fallback for Oryx deployment
              APP_DIR=""
              for dir in /tmp/*/; do
                  if [ -d "${dir}news_trader" ] && [ -d "${dir}antenv" ]; then
                      APP_DIR="$dir"
                      break
                  fi
              done
              
              if [ -n "$APP_DIR" ]; then
                  echo "✅ Found Oryx application directory: $APP_DIR"
                  cd "$APP_DIR"
              else
                  echo "❌ Could not find application directory"
                  exit 1
              fi
          fi
          
          echo "📂 Working directory: $(pwd)"
          echo "📁 Directory contents:"
          ls -la
          echo ""
          
          # Activate virtual environment if exists
          if [ -d "antenv" ]; then
              echo "🐍 Activating virtual environment..."
              source antenv/bin/activate
          fi
          
          # Verify Python and Django
          echo "🔍 Environment verification:"
          python --version
          echo "PYTHONPATH: $PYTHONPATH"
          echo ""
          
          # Test imports
          python -c "
          import sys
          import os
          try:
              import news_trader
              print('✅ news_trader module imported')
              
              import celery
              print(f'✅ Celery version: {celery.__version__}')
              
              from news_trader.celery import app
              print('✅ Celery app instance created')
              
          except Exception as e:
              print(f'❌ Import error: {e}')
              print(f'Python path: {sys.path}')
              sys.exit(1)
          "
          
          if [ $? -ne 0 ]; then
              echo "❌ Environment verification failed"
              exit 1
          fi
          
          echo ""
          echo "🚀 Starting Celery Worker..."
          
          # Start Celery with proper configuration
          exec python -m celery -A news_trader worker \
              --loglevel=INFO \
              --concurrency=1 \
              --events \
              --without-gossip \
              --without-mingle \
              --without-heartbeat
          EOF
          
          chmod +x App_Data/jobs/continuous/celeryworker/run.sh
          
          # WebJob settings optimized for Azure
          cat > App_Data/jobs/continuous/celeryworker/settings.job << 'EOF'
          {
              "is_continuous": true,
              "stopping_wait_time": 120,
              "using_sdk": false,
              "singleton": true,
              "is_singleton": true
          }
          EOF
          
          echo "✅ Azure WebJob configured"    

      - name: Crear directorios estáticos si no existen
        run: |
          mkdir -p ${{ github.workspace }}/staticfiles
          mkdir -p ${{ github.workspace }}/static

      - name: Collect static files
        run: python manage.py collectstatic --no-input

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Verify WebJob files before packaging
        run: |
          echo "🔍 Verificando archivos del WebJob..."
          echo "Estructura App_Data:"
          find App_Data -type f -exec ls -la {} \;
          echo ""
          echo "📄 Contenido run.sh:"
          cat App_Data/jobs/continuous/celeryworker/run.sh | head -30
          echo "... (script truncado para brevedad)"
          echo ""
          echo "📄 Contenido settings.job:"
          cat App_Data/jobs/continuous/celeryworker/settings.job

      - name: Zip artifact for deployment excluding unnecessary folders
        run: |
          echo "📦 Creando paquete de deployment..."
          zip -r release.zip . -x \
            "*.venv*" \
            "*.git*" \
            "*__pycache__*" \
            "*.pytest_cache*" \
            "*.coverage*" \
            "*node_modules*" \
            "*.env*"

      - name: Verify package contents
        run: |
          echo "🔍 Verificando contenido del paquete..."
          echo "Archivos del WebJob en el zip:"
          unzip -l release.zip | grep -E "(App_Data|celery)" || echo "❌ No se encontraron archivos del WebJob"
          echo ""
          echo "Tamaño del paquete:"
          ls -lh release.zip

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: |
          echo "📂 Descomprimiendo artefacto..."
          unzip release.zip
          echo "✅ Artefacto descomprimido"

      - name: Final verification before deployment
        run: |
          echo "🔍 Verificación final antes del deploy..."
          if [ -d "App_Data/jobs/continuous/celeryworker" ]; then
              echo "✅ Directorio del WebJob encontrado"
              ls -la App_Data/jobs/continuous/celeryworker/
          else
              echo "❌ Directorio del WebJob NO encontrado"
              exit 1
          fi

      - name: "Deploy to Azure Web App"
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: "news-trader-django-azure-app-backend"
          slot-name: "Production"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_BC4BA36656BF4F048A4F89E646E56639 }}
          package: '.'
          clean: false