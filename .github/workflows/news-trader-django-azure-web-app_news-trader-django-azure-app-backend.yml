# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - news-trader-django-azure-app-backend

env:
  DEBUG: False
  DJANGO_PRODUCTION: 1
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DBUSER: ${{ secrets.DBUSER }}
  DBPASS: ${{ secrets.DBPASS }}
  DBNAME: ${{ secrets.DBNAME }}
  DBHOST: ${{ secrets.DBHOST }}
  CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
  CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
  WEBSITE_HOSTNAME: ${{ vars.WEBSITE_HOSTNAME }}
  FRONTEND_URL: ${{ vars.FRONTEND_URL }}

on:
  push:
    branches:
      - news-trader-django-azure-web-app
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.3"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Clean residual Python files
        run: |
          echo "🧹 Limpiando archivos .pyc y __pycache__..."
          find . -name "*.pyc" -exec rm -f {} +
          find . -name "__pycache__" -type d -exec rm -rf {} +
          echo "🧹 Eliminando db.sqlite3 si existe..."
          find . -name "db.sqlite3" -exec rm -f {} + || true

      - name: Setup WebJob with Oryx-compatible structure
        run: |
          echo "🔧 Configurando WebJob compatible con Oryx..."
          
          # Crear estructura de carpetas para WebJob
          mkdir -p App_Data/jobs/continuous/celeryworker
          
          # Crear script de inicio que maneja la estructura de Oryx
          cat > App_Data/jobs/continuous/celeryworker/run.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "=== WebJob Celery Worker - Inicio ==="
          echo "Timestamp: $(date)"
          echo "Directorio actual: $(pwd)"
          echo "Usuario: $(whoami)"
          echo ""
          
          # Variables importantes
          ORYX_OUTPUT_PATH="/home/site/wwwroot"
          WORKING_DIR="/tmp/celery_workspace"
          
          echo "🔍 Diagnóstico del entorno:"
          echo "PATH: $PATH"
          echo "PYTHONPATH: $PYTHONPATH" 
          echo "WEBSITE_SITE_NAME: $WEBSITE_SITE_NAME"
          echo ""
          
          # Verificar estructura de Oryx
          echo "📂 Contenido de /home/site/wwwroot:"
          ls -la $ORYX_OUTPUT_PATH/
          echo ""
          
          # Buscar y descomprimir el archivo de la aplicación
          if [ -f "$ORYX_OUTPUT_PATH/output.tar.gz" ]; then
              echo "📦 Encontrado output.tar.gz, descomprimiendo..."
              
              # Crear directorio de trabajo limpio
              rm -rf $WORKING_DIR
              mkdir -p $WORKING_DIR
              cd $WORKING_DIR
              
              # Descomprimir la aplicación
              tar -xzf $ORYX_OUTPUT_PATH/output.tar.gz
              echo "✅ Aplicación descomprimida en $WORKING_DIR"
              
              # Mostrar contenido descomprimido
              echo "📁 Contenido descomprimido:"
              ls -la
              echo ""
              
          else
              echo "❌ No se encontró output.tar.gz"
              echo "📁 Intentando usar directorio actual..."
              WORKING_DIR=$ORYX_OUTPUT_PATH
              cd $WORKING_DIR
          fi
          
          # Verificar que existe el módulo de la aplicación  
          if [ ! -d "news_trader" ]; then
              echo "❌ Error: Directorio news_trader no encontrado en $(pwd)"
              echo "📁 Contenido actual:"
              ls -la
              exit 1
          fi
          
          echo "✅ Módulo news_trader encontrado"
          
          # Configurar variables de entorno para Django
          export DJANGO_SETTINGS_MODULE=news_trader.settings
          export PYTHONPATH="$WORKING_DIR:$PYTHONPATH"
          
          echo "🐍 Verificando Python y módulos..."
          python --version
          echo "Python path configurado: $PYTHONPATH"
          
          # Verificar que podemos importar los módulos necesarios
          python -c "
          import sys
          sys.path.insert(0, '$WORKING_DIR')
          print('Verificando imports...')
          try:
              import news_trader
              print('✅ news_trader importado correctamente')
          except ImportError as e:
              print(f'❌ Error importando news_trader: {e}')
              exit(1)
          
          try:
              import celery
              print(f'✅ Celery version: {celery.__version__}')
          except ImportError as e:
              print(f'❌ Error importando Celery: {e}')
              exit(1)
          "
          
          if [ $? -ne 0 ]; then
              echo "❌ Error en verificación de módulos"
              exit 1
          fi
          
          echo "🚀 Iniciando Celery Worker..."
          
          # Ejecutar Celery con configuración optimizada para Azure
          exec python -m celery -A news_trader worker \
            --loglevel=INFO \
            --events \
            --concurrency=2 \
            --max-tasks-per-child=1000 \
            --time-limit=600 \
            --soft-time-limit=540 \
            --prefetch-multiplier=1 \
            --without-heartbeat \
            --without-mingle
          EOF
          
          # Hacer el script ejecutable
          chmod +x App_Data/jobs/continuous/celeryworker/run.sh
          
          # Configuración del WebJob optimizada
          cat > App_Data/jobs/continuous/celeryworker/settings.job << 'EOF'
          {
              "is_continuous": true,
              "stopping_wait_time": 90,
              "using_sdk": false,
              "singleton": true
          }
          EOF
          
          echo "✅ WebJob configurado para compatibilidad con Oryx"

      - name: Crear directorios estáticos si no existen
        run: |
          mkdir -p ${{ github.workspace }}/staticfiles
          mkdir -p ${{ github.workspace }}/static

      - name: Collect static files
        run: python manage.py collectstatic --no-input

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Verify WebJob files before packaging
        run: |
          echo "🔍 Verificando archivos del WebJob..."
          echo "Estructura App_Data:"
          find App_Data -type f -exec ls -la {} \;
          echo ""
          echo "📄 Contenido run.sh:"
          cat App_Data/jobs/continuous/celeryworker/run.sh | head -30
          echo "... (script truncado para brevedad)"
          echo ""
          echo "📄 Contenido settings.job:"
          cat App_Data/jobs/continuous/celeryworker/settings.job

      - name: Zip artifact for deployment excluding unnecessary folders
        run: |
          echo "📦 Creando paquete de deployment..."
          zip -r release.zip . -x \
            "*.venv*" \
            "*.git*" \
            "*__pycache__*" \
            "*.pytest_cache*" \
            "*.coverage*" \
            "*node_modules*" \
            "*.env*"

      - name: Verify package contents
        run: |
          echo "🔍 Verificando contenido del paquete..."
          echo "Archivos del WebJob en el zip:"
          unzip -l release.zip | grep -E "(App_Data|celery)" || echo "❌ No se encontraron archivos del WebJob"
          echo ""
          echo "Tamaño del paquete:"
          ls -lh release.zip

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: |
          echo "📂 Descomprimiendo artefacto..."
          unzip release.zip
          echo "✅ Artefacto descomprimido"

      - name: Final verification before deployment
        run: |
          echo "🔍 Verificación final antes del deploy..."
          if [ -d "App_Data/jobs/continuous/celeryworker" ]; then
              echo "✅ Directorio del WebJob encontrado"
              ls -la App_Data/jobs/continuous/celeryworker/
          else
              echo "❌ Directorio del WebJob NO encontrado"
              exit 1
          fi

      - name: "Deploy to Azure Web App"
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: "news-trader-django-azure-app-backend"
          slot-name: "Production"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_BC4BA36656BF4F048A4F89E646E56639 }}
          package: '.'
          clean: false