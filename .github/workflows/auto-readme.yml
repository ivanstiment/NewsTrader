name: Auto Generate README

on:
  push:
    branches:
      - news-trader-django-azure-web-app
  pull_request:
    branches:
      - news-trader-django-azure-web-app
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-readme:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Generate README
      run: |
        # Crear script para generar README
        cat > generate_readme.js << 'EOF'
        const fs = require('fs');
        const path = require('path');

        // Leer package.json (frontend)
        let packageJson = {};
        let frontendPath = '';
        
        // Buscar package.json en diferentes ubicaciones comunes
        const possiblePaths = ['package.json', 'frontend/package.json', 'client/package.json', 'react-app/package.json'];
        
        for (const pathToCheck of possiblePaths) {
          if (fs.existsSync(pathToCheck)) {
            try {
              packageJson = JSON.parse(fs.readFileSync(pathToCheck, 'utf8'));
              frontendPath = pathToCheck.includes('/') ? path.dirname(pathToCheck) : '';
              console.log(`package.json encontrado en: ${pathToCheck}`);
              break;
            } catch (error) {
              console.log(`Error leyendo ${pathToCheck}`);
            }
          }
        }

        // Leer requirements.txt o pyproject.toml para detectar Django
        let pythonDeps = [];
        let djangoVersion = '';
        
        if (fs.existsSync('requirements.txt')) {
          const requirements = fs.readFileSync('requirements.txt', 'utf8');
          pythonDeps = requirements.split('\n').filter(line => line.trim());
          const djangoLine = pythonDeps.find(dep => dep.toLowerCase().includes('django'));
          if (djangoLine) {
            djangoVersion = djangoLine.includes('==') ? djangoLine.split('==')[1] : 'latest';
          }
        }

        if (fs.existsSync('pyproject.toml')) {
          const pyproject = fs.readFileSync('pyproject.toml', 'utf8');
          if (pyproject.includes('Django')) {
            djangoVersion = 'latest';
          }
        }

        // Extraer información del repositorio
        const repoUrl = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY;
        const [owner, repoName] = process.env.GITHUB_REPOSITORY.split('/');
        
        // Obtener información adicional
        const projectName = packageJson.name || repoName;
        const description = packageJson.description || 'Descripción del proyecto';
        const version = packageJson.version || '1.0.0';
        const author = packageJson.author || owner;
        const license = packageJson.license || 'MIT';
        const homepage = packageJson.homepage || repoUrl;

        // Detectar tecnologías basándose en dependencias
        const dependencies = {...(packageJson.dependencies || {}), ...(packageJson.devDependencies || {})};
        const techs = [];
        
        // Backend - Django
        if (djangoVersion || pythonDeps.some(dep => dep.toLowerCase().includes('django'))) {
          techs.push('[Django](https://www.djangoproject.com/)');
        }
        if (pythonDeps.some(dep => dep.toLowerCase().includes('djangorestframework'))) {
          techs.push('[Django REST Framework](https://www.django-rest-framework.org/)');
        }
        if (pythonDeps.some(dep => dep.toLowerCase().includes('celery'))) {
          techs.push('[Celery](https://docs.celeryq.dev/)');
        }
        if (pythonDeps.some(dep => dep.toLowerCase().includes('redis'))) {
          techs.push('[Redis](https://redis.io/)');
        }
        if (pythonDeps.some(dep => dep.toLowerCase().includes('postgresql') || dep.toLowerCase().includes('psycopg'))) {
          techs.push('[PostgreSQL](https://www.postgresql.org/)');
        }
        
        // Frontend - React + Vite
        if (dependencies.react) techs.push('[React.js](https://reactjs.org/)');
        if (dependencies.vite || (packageJson.scripts && packageJson.scripts.dev && packageJson.scripts.dev.includes('vite'))) {
          techs.push('[Vite](https://vitejs.dev/)');
        }
        if (dependencies.typescript) techs.push('[TypeScript](https://www.typescriptlang.org/)');
        if (dependencies.tailwindcss) techs.push('[Tailwind CSS](https://tailwindcss.com/)');
        if (dependencies.bootstrap) techs.push('[Bootstrap](https://getbootstrap.com)');
        if (dependencies['@mui/material']) techs.push('[Material-UI](https://mui.com/)');
        if (dependencies.axios) techs.push('[Axios](https://axios-http.com/)');
        
        // Base de datos
        if (pythonDeps.some(dep => dep.toLowerCase().includes('sqlite'))) {
          techs.push('[SQLite](https://www.sqlite.org/)');
        }
        
        // Detectar si existe Docker
        const hasDocker = fs.existsSync('Dockerfile') || fs.existsSync('docker-compose.yml');
        if (hasDocker) techs.push('[Docker](https://www.docker.com/)');

        // Generar template README
        const readmeTemplate = `<a name="readme-top"></a>

        <!-- PROJECT SHIELDS -->
        [![Contributors][contributors-shield]][contributors-url]
        [![Forks][forks-shield]][forks-url]
        [![Stargazers][stars-shield]][stars-url]
        [![Issues][issues-shield]][issues-url]
        [![${license} License][license-shield]][license-url]
        [![LinkedIn][linkedin-shield]][linkedin-url]

        <!-- PROJECT LOGO -->
        <br />
        <div align="center">
          <a href="${repoUrl}">
            <img src="images/logo.png" alt="Logo" width="80" height="80">
          </a>

          <h3 align="center">${projectName}</h3>

          <p align="center">
            ${description}
            <br />
            <a href="${repoUrl}"><strong>Explorar documentación »</strong></a>
            <br />
            <br />
            <a href="${homepage}">Ver Demo</a>
            ·
            <a href="${repoUrl}/issues">Reportar Bug</a>
            ·
            <a href="${repoUrl}/issues">Solicitar Feature</a>
          </p>
        </div>

        <!-- TABLE OF CONTENTS -->
        <details>
          <summary>Tabla de Contenidos</summary>
          <ol>
            <li>
              <a href="#acerca-del-proyecto">Acerca del Proyecto</a>
              <ul>
                <li><a href="#construido-con">Construido Con</a></li>
              </ul>
            </li>
            <li>
              <a href="#comenzando">Comenzando</a>
              <ul>
                <li><a href="#prerequisitos">Prerequisitos</a></li>
                <li><a href="#instalación">Instalación</a></li>
              </ul>
            </li>
            <li><a href="#uso">Uso</a></li>
            <li><a href="#roadmap">Roadmap</a></li>
            <li><a href="#contribuir">Contribuir</a></li>
            <li><a href="#licencia">Licencia</a></li>
            <li><a href="#contacto">Contacto</a></li>
            <li><a href="#reconocimientos">Reconocimientos</a></li>
          </ol>
        </details>

        <!-- ABOUT THE PROJECT -->
        ## Acerca del Proyecto

        [![Captura del Producto][product-screenshot]](${homepage})

        ${description}

        Aquí encontrarás información sobre este proyecto desarrollado con las siguientes tecnologías:

        <p align="right">(<a href="#readme-top">volver arriba</a>)</p>

        ### Construido Con

        Este proyecto fue desarrollado utilizando las siguientes tecnologías principales:

        ${techs.map(tech => `* ${tech}`).join('\n')}

        <p align="right">(<a href="#readme-top">volver arriba</a>)</p>

        <!-- GETTING STARTED -->
        ## Comenzando

        Para obtener una copia local funcionando, sigue estos pasos simples.

        ### Prerequisitos

        Lista de software necesario y cómo instalarlo.

        **Backend (Django):**
        * Python 3.8+
          \`\`\`sh
          python --version
          \`\`\`
        * pip
          \`\`\`sh
          pip install --upgrade pip
          \`\`\`

        **Frontend (React + Vite):**
        * Node.js 16+
          \`\`\`sh
          node --version
          \`\`\`
        * npm
          \`\`\`sh
          npm install npm@latest -g
          \`\`\`

        ### Instalación

        1. Clona el repositorio
           \`\`\`sh
           git clone ${repoUrl}.git
           cd ${repoName}
           \`\`\`

        2. **Configuración del Backend (Django):**
           \`\`\`sh
           # Crear entorno virtual
           python -m venv venv
           
           # Activar entorno virtual
           # En Windows:
           venv\\Scripts\\activate
           # En macOS/Linux:
           source venv/bin/activate
           
           # Instalar dependencias
           pip install -r requirements.txt
           
           # Realizar migraciones
           python manage.py migrate
           
           # Crear superusuario (opcional)
           python manage.py createsuperuser
           \`\`\`

        3. **Configuración del Frontend (React + Vite):**
           \`\`\`sh
           ${frontendPath ? `cd ${frontendPath}` : '# Si el frontend está en una carpeta separada, navega a ella'}
           
           # Instalar dependencias
           npm install
           \`\`\`

        4. **Variables de entorno:**
           \`\`\`sh
           # Crear archivo .env en la raíz del proyecto
           cp .env.example .env
           
           # Editar .env con tus configuraciones
           # DATABASE_URL=tu_base_de_datos
           # SECRET_KEY=tu_clave_secreta
           # DEBUG=True
           \`\`\`

        5. **Ejecutar el proyecto:**
           
           **Terminal 1 - Backend (Django):**
           \`\`\`sh
           python manage.py runserver
           \`\`\`
           
           **Terminal 2 - Frontend (React + Vite):**
           \`\`\`sh
           ${frontendPath ? `cd ${frontendPath}` : ''}
           npm run dev
           \`\`\`

        El backend estará disponible en \`http://localhost:8000\`
        El frontend estará disponible en \`http://localhost:5173\`

        <p align="right">(<a href="#readme-top">volver arriba</a>)</p>

        <!-- USAGE EXAMPLES -->
        ## Uso

        ### API Endpoints

        El backend de Django proporciona una API REST. Algunos endpoints principales:

        \`\`\`
        GET  /api/                    # Documentación de la API
        POST /api/auth/login/         # Login de usuario
        GET  /api/users/              # Lista de usuarios
        \`\`\`

        ### Interfaz de Usuario

        La aplicación React proporciona una interfaz moderna y responsiva. Navega a \`http://localhost:5173\` para ver la aplicación en funcionamiento.

        ### Panel de Administración

        Django incluye un panel de administración automático:
        - URL: \`http://localhost:8000/admin/\`
        - Usa las credenciales del superusuario creado durante la instalación

        _Para más ejemplos, por favor consulta la [Documentación](${repoUrl})_

        <p align="right">(<a href="#readme-top">volver arriba</a>)</p>

        <!-- ROADMAP -->
        ## Roadmap

        - [x] Configurar Django REST Framework
        - [x] Integrar React con Vite
        - [x] Configurar autenticación
        - [ ] Añadir tests unitarios (Django + React)
        - [ ] Implementar CI/CD
        - [ ] Dockerizar la aplicación
        - [ ] Añadir documentación de API con Swagger
        - [ ] Soporte para notificaciones en tiempo real
        - [ ] Optimización de rendimiento

        Ve los [issues abiertos](${repoUrl}/issues) para una lista completa de características propuestas (y problemas conocidos).

        <p align="right">(<a href="#readme-top">volver arriba</a>)</p>

        <!-- CONTRIBUTING -->
        ## Contribuir

        Las contribuciones son lo que hacen a la comunidad open source un lugar increíble para aprender, inspirar y crear. Cualquier contribución que hagas es **muy apreciada**.

        Si tienes una sugerencia que podría mejorar esto, por favor haz fork del repositorio y crea un pull request. También puedes simplemente abrir un issue con la etiqueta "enhancement".
        ¡No olvides darle una estrella al proyecto! Gracias de nuevo.

        1. Haz Fork del Proyecto
        2. Crea tu Feature Branch (\`git checkout -b feature/AmazingFeature\`)
        3. Commit tus Cambios (\`git commit -m 'Add some AmazingFeature'\`)
        4. Push a la Branch (\`git push origin feature/AmazingFeature\`)
        5. Abre un Pull Request

        <p align="right">(<a href="#readme-top">volver arriba</a>)</p>

        <!-- LICENSE -->
        ## Licencia

        Distribuido bajo la Licencia ${license}. Ve \`LICENSE.txt\` para más información.

        <p align="right">(<a href="#readme-top">volver arriba</a>)</p>

        <!-- CONTACT -->
        ## Contacto

        ${author} - [@tu_twitter](https://twitter.com/tu_twitter) - email@ejemplo.com

        Link del Proyecto: [${repoUrl}](${repoUrl})

        <p align="right">(<a href="#readme-top">volver arriba</a>)</p>

        <!-- ACKNOWLEDGMENTS -->
        ## Reconocimientos

        Utiliza este espacio para listar recursos que encuentres útiles y a los que te gustaría dar crédito. ¡He incluido algunos de mis favoritos para comenzar!

        * [Choose an Open Source License](https://choosealicense.com)
        * [GitHub Emoji Cheat Sheet](https://www.webpagefx.com/tools/emoji-cheat-sheet)
        * [Malven's Flexbox Cheatsheet](https://flexbox.malven.co/)
        * [Malven's Grid Cheatsheet](https://grid.malven.co/)
        * [Img Shields](https://shields.io)
        * [GitHub Pages](https://pages.github.com)
        * [Font Awesome](https://fontawesome.com)
        * [React Icons](https://react-icons.github.io/react-icons/search)

        <p align="right">(<a href="#readme-top">volver arriba</a>)</p>

        <!-- MARKDOWN LINKS & IMAGES -->
        [contributors-shield]: https://img.shields.io/github/contributors/${owner}/${repoName}.svg?style=for-the-badge
        [contributors-url]: ${repoUrl}/graphs/contributors
        [forks-shield]: https://img.shields.io/github/forks/${owner}/${repoName}.svg?style=for-the-badge
        [forks-url]: ${repoUrl}/network/members
        [stars-shield]: https://img.shields.io/github/stars/${owner}/${repoName}.svg?style=for-the-badge
        [stars-url]: ${repoUrl}/stargazers
        [issues-shield]: https://img.shields.io/github/issues/${owner}/${repoName}.svg?style=for-the-badge
        [issues-url]: ${repoUrl}/issues
        [license-shield]: https://img.shields.io/github/license/${owner}/${repoName}.svg?style=for-the-badge
        [license-url]: ${repoUrl}/blob/master/LICENSE.txt
        [linkedin-shield]: https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&logo=linkedin&colorB=555
        [linkedin-url]: https://linkedin.com/in/tu-perfil
        [product-screenshot]: images/screenshot.png
        `;

        // Escribir el README.md
        fs.writeFileSync('README.md', readmeTemplate);
        console.log('README.md generado exitosamente!');
        EOF

        # Ejecutar el script
        node generate_readme.js
        
    - name: Configure Git
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Commit and Push README
      run: |
        git add README.md
        if git diff --staged --quiet; then
          echo "No hay cambios en README.md"
        else
          git commit -m "docs: actualizar README.md automáticamente [skip ci]"
          git push
        fi

    # - name: Commit and Push README
    #   run: |
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git add README.md
    #     if git diff --staged --quiet; then
    #       echo "No hay cambios en README.md"
    #     else
    #       git commit -m "docs: actualizar README.md automáticamente [skip ci]"
    #       git push
    #     fi
