name: Auto Generate README

on:
  push:
    branches:
      - news-trader-django-azure-web-app
  pull_request:
    branches:
      - news-trader-django-azure-web-app
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-readme:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.15.1'

    - name: Generate README
      run: |
        # Crear script para generar README de NewsTrader
        cat > generate_readme.js << 'EOF'
        const fs = require('fs');
        const path = require('path');

        // Leer package.json (frontend)
        let packageJson = {};
        let frontendPath = '';
        
        // Buscar package.json en diferentes ubicaciones comunes
        const possiblePaths = ['package.json', 'frontend/package.json', 'client/package.json', 'react-app/package.json'];
        
        for (const pathToCheck of possiblePaths) {
          if (fs.existsSync(pathToCheck)) {
            try {
              packageJson = JSON.parse(fs.readFileSync(pathToCheck, 'utf8'));
              frontendPath = pathToCheck.includes('/') ? path.dirname(pathToCheck) : '';
              console.log(`package.json encontrado en: ${pathToCheck}`);
              break;
            } catch (error) {
              console.log(`Error leyendo ${pathToCheck}`);
            }
          }
        }

        // Leer requirements.txt para detectar dependencias Python
        let pythonDeps = [];
        let djangoVersion = '';
        
        if (fs.existsSync('requirements.txt')) {
          const requirements = fs.readFileSync('requirements.txt', 'utf8');
          pythonDeps = requirements.split('\n').filter(line => line.trim());
          const djangoLine = pythonDeps.find(dep => dep.toLowerCase().includes('django'));
          if (djangoLine) {
            djangoVersion = djangoLine.includes('==') ? djangoLine.split('==')[1] : 'latest';
          }
        }

        // Extraer informaci√≥n del repositorio
        const repoUrl = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY;
        const [owner, repoName] = process.env.GITHUB_REPOSITORY.split('/');
        
        // Informaci√≥n espec√≠fica de NewsTrader
        const projectInfo = {
          name: 'NewsTrader',
          description: 'Sistema automatizado de monitoreo y an√°lisis de noticias para trading de small caps en tiempo real',
          version: packageJson.version || '1.0.0',
          author: 'Iv√°n Soto',
          homepage: 'https://salmon-stone-0e4a4f410.6.azurestaticapps.net/',
          backendUrl: 'https://news-trader-django-azure-app-backend-aggfgbhrbyasaucd.spaincentral-01.azurewebsites.net/',
          docsUrl: 'https://ivanstiment.github.io/NewsTrader/',
          apiDocsUrl: 'https://news-trader-django-azure-app-backend-aggfgbhrbyasaucd.spaincentral-01.azurewebsites.net/api/docs/'
        };

        // Tecnolog√≠as espec√≠ficas de NewsTrader
        const techStack = [
          '* ![Python](https://img.shields.io/badge/Python-3.13.3-blue?style=flat-square&logo=python) [Python 3.13.3](https://www.python.org/)',
          '* ![Django](https://img.shields.io/badge/Django-5.2-green?style=flat-square&logo=django) [Django 5.2](https://www.djangoproject.com/)',
          '* ![DRF](https://img.shields.io/badge/DRF-3.16.0-red?style=flat-square) [Django REST Framework 3.16.0](https://www.django-rest-framework.org/)',
          '* ![PostgreSQL](https://img.shields.io/badge/PostgreSQL-Azure-blue?style=flat-square&logo=postgresql) [Azure Database for PostgreSQL](https://azure.microsoft.com/services/postgresql/)',
          '* ![Redis](https://img.shields.io/badge/Redis-6.1.0-red?style=flat-square&logo=redis) [Redis 6.1.0](https://redis.io/)',
          '* ![Celery](https://img.shields.io/badge/Celery-5.5.2-green?style=flat-square) [Celery 5.5.2](https://docs.celeryq.dev/)',
          '* ![React](https://img.shields.io/badge/React-19.0.0-blue?style=flat-square&logo=react) [React 19.0.0](https://reactjs.org/)',
          '* ![Vite](https://img.shields.io/badge/Vite-6.3.1-yellow?style=flat-square&logo=vite) [Vite 6.3.1](https://vitejs.dev/)',
          '* ![ApexCharts](https://img.shields.io/badge/ApexCharts-4.7.0-orange?style=flat-square) [ApexCharts 4.7.0](https://apexcharts.com/)',
          '* ![Azure](https://img.shields.io/badge/Azure-Cloud-blue?style=flat-square&logo=microsoft-azure) [Microsoft Azure](https://azure.microsoft.com/)'
        ];

        // Generar template README espec√≠fico para NewsTrader
        const readmeTemplate = `<div align="center">
          <img src="client/public/logo.svg" alt="NewsTrader Logo" width="100" style="margin: 0 auto; display: block;" />
        </div>
        
        # NewsTrader
        **Sistema automatizado de monitoreo y an√°lisis de noticias para trading de small caps en tiempo real**

        [![Explorar documentaci√≥n ¬ª](https://img.shields.io/badge/Docs-Explorar-blue?style=for-the-badge)](${projectInfo.docsUrl})
        [![Ver Demo](https://img.shields.io/badge/Demo-Ver%20Live-success?style=for-the-badge)](${projectInfo.homepage})
        [![Reportar Bug](https://img.shields.io/badge/Bug-Reportar-red?style=for-the-badge)](${repoUrl}/issues)
        [![Solicitar Feature](https://img.shields.io/badge/Feature-Solicitar-yellow?style=for-the-badge)](${repoUrl}/issues)

        ---

        ## üìã Tabla de Contenidos

        - [Descripci√≥n del proyecto](#descripci√≥n-del-proyecto)
        - [Tecnolog√≠as utilizadas](#tecnolog√≠as-utilizadas)
        - [Caracter√≠sticas principales](#caracter√≠sticas-principales)
        - [Instalaci√≥n](#instalaci√≥n)
        - [Uso](#uso)
        - [API Endpoints](#api-endpoints)
        - [Despliegue](#despliegue)
        - [Contribuir](#contribuir)
        - [Licencia](#licencia)
        - [Reconocimientos](#reconocimientos)

        ---

        ## üìñ Descripci√≥n del proyecto

        NewsTrader es un sistema integral de an√°lisis financiero especializado en **small caps** que combina:

        üîç **Extracci√≥n automatizada** de noticias financieras desde Yahoo Finance  
        üìä **An√°lisis de sentimiento** utilizando diccionarios especializados Loughran-McDonald  
        üìà **Visualizaci√≥n interactiva** con correlaci√≥n noticia-precio mediante ApexCharts  
        ü§ñ **Procesamiento as√≠ncrono** con Celery y Redis para an√°lisis en tiempo real  
        üèóÔ∏è **Arquitectura cloud-native** desplegada en Microsoft Azure  

        ### üéØ Objetivo Principal
        Democratizar el acceso a an√°lisis financiero de nivel profesional para trading de small caps, proporcionando herramientas tradicionalmente disponibles solo en terminales premium costosos como Bloomberg o Reuters.

        ---

        ## üöÄ Tecnolog√≠as utilizadas

        ### Backend
        ${techStack.slice(0, 6).join('\n')}

        ### Frontend & Visualizaci√≥n
        ${techStack.slice(6, 9).join('\n')}
        * ![Axios](https://img.shields.io/badge/Axios-1.8.4-purple?style=flat-square) [Axios 1.8.4](https://axios-http.com/)
        * ![JWT Decode](https://img.shields.io/badge/JWT%20Decode-4.0.0-orange?style=flat-square) [JWT Decode 4.0.0](https://github.com/auth0/jwt-decode)

        ### Cloud & Infrastructure
        ${techStack.slice(9).join('\n')}
        * ![GitHub Actions](https://img.shields.io/badge/GitHub%20Actions-CI%2FCD-black?style=flat-square&logo=github) [GitHub Actions](https://github.com/features/actions)

        ---

        ## ‚ú® Caracter√≠sticas principales

        ### üîê **Sistema de Autenticaci√≥n Avanzado**
        - Registro y login con validaci√≥n robusta
        - Autenticaci√≥n JWT con tokens de acceso y refresh
        - Gesti√≥n de sesiones seguras con blacklist de tokens

        ### üì∞ **An√°lisis de Noticias Inteligente**
        - Extracci√≥n autom√°tica desde Yahoo Finance
        - An√°lisis de sentimiento especializado en terminolog√≠a financiera
        - Procesamiento as√≠ncrono con Celery para an√°lisis en tiempo real
        - Estados visuales: Analizar ‚Üí Analizando ‚Üí Re-analizar

        ### üîç **B√∫squeda de Stocks Avanzada**
        - Filtrado inteligente por s√≠mbolo burs√°til
        - Validaciones multinivel con mensajes contextuales
        - Cat√°logo visual de instrumentos disponibles

        ### üìä **Terminal Financiero Completo**
        - M√©tricas financieras de nivel Bloomberg
        - Datos corporativos completos (balance, P&L, cash flow)
        - Ratios de rentabilidad, liquidez y solvencia
        - Enlaces contextuales a informaci√≥n oficial

        ### üìà **Visualizaci√≥n Innovadora (Caracter√≠stica Estrella)**
        - Gr√°ficas interactivas con ApexCharts
        - **Correlaci√≥n visual √∫nica** entre noticias y movimientos de precios
        - Candlestick charts profesionales con volumen sincronizado  
        - Tooltips contextuales con informaci√≥n de noticias por fecha
        - Navegaci√≥n temporal flexible con zoom y pan

        ---

        ## üõ†Ô∏è Instalaci√≥n

        ### Prerequisitos

        **Backend (Django):**
        - Python 3.8+
        - pip actualizado

        **Frontend (React + Vite):**
        - Node.js 20.15.1
        - npm 10.7.0

        **Servicios adicionales:**
        - Redis Server (para Celery)
        - PostgreSQL (producci√≥n) / SQLite (desarrollo)

        ### Configuraci√≥n paso a paso

        1. **Clonar el repositorio**
          \`\`\`bash
          git clone ${repoUrl}.git
          cd ${repoName}
          \`\`\`

        2. **Configuraci√≥n del Backend (Django)**
          \`\`\`bash
          # Crear entorno virtual
          python -m venv venv
          
          # Activar entorno virtual
          # Windows:
          venv\\Scripts\\activate
          # macOS/Linux:
          source venv/bin/activate
          
          # Instalar dependencias
          pip install -r requirements.txt
          
          # Realizar migraciones
          python manage.py migrate
          
          # Crear superusuario (opcional)
          python manage.py createsuperuser
          \`\`\`

        3. **Configuraci√≥n del Frontend (React + Vite)**
          \`\`\`bash
          ${frontendPath ? `cd ${frontendPath}` : 'cd client  # Navegar al directorio del frontend'}
          
          # Instalar dependencias
          npm install
          \`\`\`

        4. **Variables de entorno**
          \`\`\`bash
          # Crear archivo .env en la ra√≠z del proyecto
          cp .env.example .env
          
          # Configurar variables (ejemplo):
          # DATABASE_URL=tu_base_de_datos
          # SECRET_KEY=tu_clave_secreta_django
          # DEBUG=True
          # CELERY_BROKER_URL=redis://localhost:6379/0
          # CELERY_RESULT_BACKEND=redis://localhost:6379/1
          \`\`\`

        5. **Ejecutar servicios**

          **Terminal 1 - Redis Server:**
          \`\`\`bash
          redis-server
          \`\`\`

          **Terminal 2 - Backend Django:**
          \`\`\`bash
          python manage.py runserver
          \`\`\`

          **Terminal 3 - Worker Celery:**
          \`\`\`bash
          celery -A news_trader worker --loglevel=info --events -P eventlet
          \`\`\`

          **Terminal 4 - Frontend React:**
          \`\`\`bash
          ${frontendPath ? `cd ${frontendPath}` : 'cd client'}
          npm run dev
          \`\`\`

        ### üåê URLs de acceso
        - **Frontend:** http://localhost:5173
        - **Backend API:** http://localhost:8000/api/
        - **Admin Panel:** http://localhost:8000/admin/
        - **API Docs:** http://localhost:8000/api/docs/

        ---

        ## üíª Uso

        ### üéØ Flujo principal de usuario

        1. **Registro/Login:** Sistema de autenticaci√≥n con validaci√≥n robusta
        2. **Dashboard de Noticias:** Listado con an√°lisis de sentimiento autom√°tico
        3. **B√∫squeda de Stocks:** Filtrado inteligente por s√≠mbolo burs√°til  
        4. **An√°lisis Detallado:** Terminal financiero con m√©tricas completas
        5. **Visualizaci√≥n Avanzada:** Gr√°ficas con correlaci√≥n noticia-precio

        ### üîç An√°lisis de Sentimiento
        - **Autom√°tico:** Se ejecuta al cargar nuevas noticias
        - **Manual:** Bot√≥n "Analizar" para an√°lisis bajo demanda
        - **Resultados:** POSITIVO/NEUTRAL/NEGATIVO con puntuaci√≥n num√©rica

        ### üìä Correlaci√≥n Visual (Caracter√≠stica √önica)
        - Puntos amarillos indican d√≠as con noticias
        - Tooltips muestran precios OHLCV + t√≠tulo de noticia
        - Sincronizaci√≥n perfecta entre gr√°ficas de precio y volumen
        - Zoom temporal desde d√≠as individuales hasta meses completos

        ---

        ## üîå API Endpoints

        La API REST est√° completamente documentada con OpenAPI 3.0:

        ### üîë Autenticaci√≥n
        \`\`\`
        POST /token/                    # Login (obtener tokens JWT)
        POST /token/refresh/            # Renovar token de acceso
        POST /logout/                   # Logout
        POST /register/                 # Registro de usuario
        \`\`\`

        ### üì∞ Noticias
        \`\`\`
        GET  /news/                     # Listar noticias (con paginaci√≥n)
        GET  /news/{id}/                # Detalle de noticia
        POST /news/{id}/analyze/        # Analizar sentimiento
        \`\`\`

        ### üìà Stocks
        \`\`\`
        GET  /stocks/                   # Listar stocks disponibles
        GET  /stock/{symbol}/           # Detalle completo del stock
        GET  /historical-price/{symbol}/ # Datos hist√≥ricos de precios
        \`\`\`

        ### üìö Documentaci√≥n completa
        - **Swagger UI:** [${projectInfo.apiDocsUrl}](${projectInfo.apiDocsUrl})
        - **Schema OpenAPI:** [${projectInfo.backendUrl}/api/schema/](${projectInfo.backendUrl}/api/schema/)

        ---

        ## ü§ù Contribuir

        Las contribuciones son bienvenidas y muy apreciadas. Para contribuir:

        1. **Fork** el proyecto
        2. **Crea** tu rama de feature (\`git checkout -b feature/AmazingFeature\`)
        3. **Commit** tus cambios (\`git commit -m 'Add some AmazingFeature'\`)
        4. **Push** a la rama (\`git push origin feature/AmazingFeature\`)
        5. **Abre** un Pull Request

        ### üõ£Ô∏è Roadmap futuro
        - [ ] Sistema de alertas automatizadas
        - [ ] An√°lisis predictivo con Machine Learning  
        - [ ] Integraci√≥n con brokers populares
        - [ ] Aplicaci√≥n m√≥vil nativa
        - [ ] Soporte para mercados internacionales
        - [ ] An√°lisis de redes sociales (Twitter, Reddit)

        ---

        ## üìÑ Licencia

        Distribuido bajo la Apache License, Version 2.0. Ve \`LICENSE\` para m√°s informaci√≥n.

        ---

        ## üìû Contacto

        **Iv√°n Soto** - isotocos@uoc.edu

        **üîó Links del proyecto:**
        - üåü **Demo Live:** [${projectInfo.homepage}](${projectInfo.homepage})
        - üìÅ **Repositorio:** [${repoUrl}](${repoUrl})
        - üìñ **Documentaci√≥n:** [${projectInfo.docsUrl}](${projectInfo.docsUrl})
        - üîß **API Docs:** [${projectInfo.apiDocsUrl}](${projectInfo.apiDocsUrl})

        ---

        ## üôè Reconocimientos

        Recursos y herramientas que hicieron posible este proyecto:

        * [Yahoo Finance API](https://pypi.org/project/yfinance/) - Datos financieros
        * [Loughran-McDonald Dictionary](https://sraf.nd.edu/textual-analysis/resources/) - An√°lisis de sentimiento financiero
        * [ApexCharts](https://apexcharts.com/) - Visualizaciones interactivas
        * [Django REST Framework](https://www.django-rest-framework.org/) - API REST robusta
        * [Celery](https://docs.celeryq.dev/) - Procesamiento as√≠ncrono
        * [Microsoft Azure](https://azure.microsoft.com/) - Infraestructura cloud
        * [GitHub Actions](https://github.com/features/actions) - CI/CD automatizado

        ---

        <div align="center">

        **‚≠ê Si este proyecto te resulta √∫til, considera darle una estrella ‚≠ê**

        [![Stargazers](https://img.shields.io/github/stars/${owner}/${repoName}?style=social)](${repoUrl}/stargazers)
        [![Follow](https://img.shields.io/github/followers/${owner}?style=social)](https://github.com/${owner})

        </div>
        `;

        // Escribir el README.md
        fs.writeFileSync('README.md', readmeTemplate);
        console.log('‚úÖ README.md de NewsTrader generado exitosamente!');
        console.log('üìä Incluye: Arquitectura Azure, APIs, M√©tricas del sistema, y documentaci√≥n completa');
        EOF

        # Ejecutar el script
        node generate_readme.js    
    
    - name: Configure Git
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Commit and Push README
      run: |
        git add README.md
        if git diff --staged --quiet; then
          echo "No hay cambios en README.md"
        else
          git commit -m "docs: actualizar README.md autom√°ticamente [skip ci]"
          git push
        fi
