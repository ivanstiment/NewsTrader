from django.db import models


class Stock(models.Model):
    # Identificador del ticker
    symbol = models.CharField(max_length=20, unique=True)
    # Dirección y contacto
    address1 = models.CharField(max_length=255, blank=True, null=True)
    address2 = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=100, blank=True, null=True)
    zip = models.CharField(max_length=20, blank=True, null=True)
    country = models.CharField(max_length=100, blank=True, null=True)
    phone = models.CharField(max_length=50, blank=True, null=True)
    website = models.URLField(blank=True, null=True)
    # Sector e industria
    industry = models.CharField(max_length=100, blank=True, null=True)
    industryKey = models.CharField(max_length=100, blank=True, null=True)
    industryDisp = models.CharField(max_length=100, blank=True, null=True)
    sector = models.CharField(max_length=100, blank=True, null=True)
    sectorKey = models.CharField(max_length=100, blank=True, null=True)
    sectorDisp = models.CharField(max_length=100, blank=True, null=True)
    # Descripción y empleados
    longBusinessSummary = models.TextField(blank=True, null=True)
    fullTimeEmployees = models.IntegerField(blank=True, null=True)
    # Fechas como epoch
    compensationAsOfEpochDate = models.BigIntegerField(blank=True, null=True)
    maxAge = models.IntegerField(blank=True, null=True)
    # Datos de mercado
    previousClose = models.FloatField(blank=True, null=True)
    open = models.FloatField(blank=True, null=True)
    # open_price             = models.FloatField(blank=True, null=True)
    dayLow = models.FloatField(blank=True, null=True)
    dayHigh = models.FloatField(blank=True, null=True)
    regularMarketPreviousClose = models.FloatField(blank=True, null=True)
    regularMarketOpen = models.FloatField(blank=True, null=True)
    regularMarketDayLow = models.FloatField(blank=True, null=True)
    regularMarketDayHigh = models.FloatField(blank=True, null=True)
    volume = models.BigIntegerField(blank=True, null=True)
    averageVolume = models.BigIntegerField(blank=True, null=True)
    averageVolume10days = models.BigIntegerField(blank=True, null=True)
    averageDailyVolume10Day = models.BigIntegerField(blank=True, null=True)
    bid = models.FloatField(blank=True, null=True)
    ask = models.FloatField(blank=True, null=True)
    bidSize = models.BigIntegerField(blank=True, null=True)
    askSize = models.BigIntegerField(blank=True, null=True)
    marketCap = models.BigIntegerField(blank=True, null=True)
    fiftyTwoWeekLow = models.FloatField(blank=True, null=True)
    fiftyTwoWeekHigh = models.FloatField(blank=True, null=True)
    priceToSalesTrailing12Months = models.FloatField(blank=True, null=True)
    fiftyDayAverage = models.FloatField(blank=True, null=True)
    twoHundredDayAverage = models.FloatField(blank=True, null=True)
    payoutRatio = models.FloatField(blank=True, null=True)
    beta = models.FloatField(blank=True, null=True)
    currency = models.CharField(max_length=10, blank=True, null=True)
    tradeable = models.BooleanField(default=False)
    enterpriseValue = models.BigIntegerField(blank=True, null=True)
    profitMargins = models.FloatField(blank=True, null=True)
    floatShares = models.BigIntegerField(blank=True, null=True)
    sharesOutstanding = models.BigIntegerField(blank=True, null=True)
    sharesShort = models.BigIntegerField(blank=True, null=True)
    sharesShortPriorMonth = models.BigIntegerField(blank=True, null=True)
    dateShortInterest = models.BigIntegerField(blank=True, null=True)
    sharesPercentSharesOut = models.FloatField(blank=True, null=True)
    heldPercentInsiders = models.FloatField(blank=True, null=True)
    heldPercentInstitutions = models.FloatField(blank=True, null=True)
    shortRatio = models.FloatField(blank=True, null=True)
    shortPercentOfFloat = models.FloatField(blank=True, null=True)
    impliedSharesOutstanding = models.BigIntegerField(blank=True, null=True)
    bookValue = models.FloatField(blank=True, null=True)
    priceToBook = models.FloatField(blank=True, null=True)
    lastFiscalYearEnd = models.BigIntegerField(blank=True, null=True)
    nextFiscalYearEnd = models.BigIntegerField(blank=True, null=True)
    mostRecentQuarter = models.BigIntegerField(blank=True, null=True)
    netIncomeToCommon = models.BigIntegerField(blank=True, null=True)
    trailingEps = models.FloatField(blank=True, null=True)
    lastSplitFactor = models.CharField(max_length=50, blank=True, null=True)
    lastSplitDate = models.BigIntegerField(blank=True, null=True)
    enterpriseToRevenue = models.FloatField(blank=True, null=True)
    enterpriseToEbitda = models.FloatField(blank=True, null=True)
    # fiftyTwoWeekChange     = models.FloatField(blank=True, null=True, db_column="52WeekChange")
    # week_52_change = models.FloatField(db_column='52WeekChange', blank=True, null=True, help_text="Cambio en 52 semanas")
    SandP52WeekChange = models.FloatField(blank=True, null=True)
    quoteType = models.CharField(max_length=50, blank=True, null=True)
    currentPrice = models.FloatField(blank=True, null=True)
    recommendationKey = models.CharField(max_length=50, blank=True, null=True)
    totalCash = models.BigIntegerField(blank=True, null=True)
    totalCashPerShare = models.FloatField(blank=True, null=True)
    ebitda = models.BigIntegerField(blank=True, null=True)
    totalDebt = models.BigIntegerField(blank=True, null=True)
    quickRatio = models.FloatField(blank=True, null=True)
    currentRatio = models.FloatField(blank=True, null=True)
    totalRevenue = models.BigIntegerField(blank=True, null=True)
    debtToEquity = models.FloatField(blank=True, null=True)
    revenuePerShare = models.FloatField(blank=True, null=True)
    returnOnAssets = models.FloatField(blank=True, null=True)
    returnOnEquity = models.FloatField(blank=True, null=True)
    grossProfits = models.BigIntegerField(blank=True, null=True)
    freeCashflow = models.BigIntegerField(blank=True, null=True)
    operatingCashflow = models.BigIntegerField(blank=True, null=True)
    revenueGrowth = models.FloatField(blank=True, null=True)
    grossMargins = models.FloatField(blank=True, null=True)
    ebitdaMargins = models.FloatField(blank=True, null=True)
    operatingMargins = models.FloatField(blank=True, null=True)
    financialCurrency = models.CharField(max_length=10, blank=True, null=True)
    shortName = models.CharField(max_length=200, blank=True, null=True)
    longName = models.CharField(max_length=200, blank=True, null=True)
    marketState = models.CharField(max_length=50, blank=True, null=True)
    regularMarketTime = models.BigIntegerField(blank=True, null=True)
    exchange = models.CharField(max_length=50, blank=True, null=True)
    exchangeTimezoneName = models.CharField(max_length=100, blank=True, null=True)
    exchangeTimezoneShortName = models.CharField(max_length=20, blank=True, null=True)
    gmtoffsetMilliseconds = models.BigIntegerField(blank=True, null=True)
    market = models.CharField(max_length=50, blank=True, null=True)
    esgPopulated = models.BooleanField(default=False)
    hasPrePostMarketData = models.BooleanField(default=False)
    sourceInterval = models.IntegerField(blank=True, null=True)
    exchangeDataDelayedBy = models.IntegerField(blank=True, null=True)
    cryptoTradeable = models.BooleanField(default=False)
    firstTradeDateMilliseconds = models.BigIntegerField(blank=True, null=True)
    regularMarketChange = models.FloatField(blank=True, null=True)
    regularMarketDayRange = models.CharField(max_length=50, blank=True, null=True)
    fullExchangeName = models.CharField(max_length=100, blank=True, null=True)
    averageDailyVolume3Month = models.BigIntegerField(blank=True, null=True)
    fiftyTwoWeekLowChange = models.FloatField(blank=True, null=True)
    fiftyTwoWeekLowChangePercent = models.FloatField(blank=True, null=True)
    fiftyTwoWeekRange = models.CharField(max_length=100, blank=True, null=True)
    fiftyTwoWeekHighChange = models.FloatField(blank=True, null=True)
    fiftyTwoWeekHighChangePercent = models.FloatField(blank=True, null=True)
    epsTrailingTwelveMonths = models.FloatField(blank=True, null=True)
    displayName = models.CharField(max_length=200, blank=True, null=True)
    trailingPegRatio = models.CharField(max_length=50, blank=True, null=True)
    # Listas anidadas como JSON por si varían
    executiveTeam = models.JSONField(blank=True, null=True)
    corporateActions = models.JSONField(blank=True, null=True)
    additional_info = models.JSONField(blank=True, null=True)

    def __str__(self):
        return self.symbol


class CompanyOfficer(models.Model):
    stock = models.ForeignKey(
        Stock, related_name="companyOfficers", on_delete=models.CASCADE
    )
    maxAge = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=200)
    age = models.IntegerField(blank=True, null=True)
    title = models.CharField(max_length=200, blank=True, null=True)
    yearBorn = models.IntegerField(blank=True, null=True)
    fiscalYear = models.IntegerField(blank=True, null=True)
    totalPay = models.BigIntegerField(blank=True, null=True)
    exercisedValue = models.BigIntegerField(blank=True, null=True)
    unexercisedValue = models.BigIntegerField(blank=True, null=True)

    def __str__(self):
        return f"{self.name} ({self.title})"


class HistoricalPrice(models.Model):
    symbol = models.CharField(max_length=10)
    date = models.DateField()
    open = models.FloatField()
    high = models.FloatField()
    low = models.FloatField()
    close = models.FloatField()
    volume = models.BigIntegerField()
    dividends = models.FloatField(default=0.0)
    stock_splits = models.FloatField(default=0.0)

    class Meta:
        unique_together = ("symbol", "date")
        ordering = ["-date"]

    def __str__(self):
        return f"{self.symbol} - {self.date}"