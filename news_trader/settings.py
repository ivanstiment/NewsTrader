"""
Django settings for news_trader project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent

IS_PRODUCTION = os.environ.get("DBHOST") or os.environ.get("DJANGO_PRODUCTION") == "1"

# -------------------------------
# üîê Seguridad y configuraci√≥n b√°sica
# -------------------------------
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    "django-insecure-tq&z7$*sz9k^^4^b@_43c3ggo=lvrswuui2g@fjuy!1q%p006$",
)

DEBUG = os.environ.get("DEBUG", "True") == "True"

if IS_PRODUCTION:
    ALLOWED_HOSTS = [
        os.environ.get("WEBSITE_HOSTNAME"),
        ".azurewebsites.net",
    ]
    CSRF_TRUSTED_ORIGINS = [
        os.environ.get("FRONTEND_URL"),
        "https://*.azurewebsites.net",
    ]
    CSRF_ALLOWED_ORIGINS = [
        os.environ.get("FRONTEND_URL"),
        "https://*.azurewebsites.net",
    ]
    CORS_ORIGINS_WHITELIST = [
        os.environ.get("FRONTEND_URL"),
        "https://*.azurewebsites.net",
    ]
    CORS_ALLOWED_ORIGINS = [
        "https://salmon-stone-0e4a4f410.6.azurestaticapps.net",
        "https://*.azurestaticapps.net",
    ]
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
else:
    ALLOWED_HOSTS = ["localhost", "127.0.0.1"]
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173",
        "http://localhost:3000",
        "http://localhost:8000",
    ]
    CSRF_TRUSTED_ORIGINS = ["http://localhost:5173"]

# -------------------------------
# üö¶ Middleware y apps
# -------------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "news.apps.NewsConfig",
    "sentiment_analysis.apps.SentimentAnalysisConfig",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "django_celery_results",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# -------------------------------
# üß† Configuraci√≥n de la base de datos
# Database (SQLite local / PostgreSQL en producci√≥n)
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# -------------------------------
if IS_PRODUCTION:
    REQUIRED_ENV_VARS = ["DBNAME", "DBUSER", "DBPASS", "DBHOST"]
    missing = [var for var in REQUIRED_ENV_VARS if not os.environ.get(var)]
    if missing:
        raise RuntimeError(f"‚ùå Faltan variables de entorno: {missing}")

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ["DBNAME"],
            "USER": os.environ["DBUSER"],
            "PASSWORD": os.environ["DBPASS"],
            "HOST": os.environ["DBHOST"],
            "OPTIONS": {"sslmode": "require"},
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

ROOT_URLCONF = "news_trader.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "news_trader.wsgi.application"

# -------------------------------
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
# -------------------------------

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# -------------------------------
# üåç Internacionalizaci√≥n
# https://docs.djangoproject.com/en/5.2/topics/i18n/
# -------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# -------------------------------
# üîó CORS
# -------------------------------
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ["Content-Type", "X-CSRFToken"]

# -------------------------------
# ‚öôÔ∏è Archivos est√°ticos (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# -------------------------------
STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"

# -------------------------------
# üîê JWT y DRF
# -------------------------------
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

SIMPLE_JWT = {
    "BLACKLIST_AFTER_ROTATION": True,
    "ROTATE_REFRESH_TOKENS": True,
    "AUTH_COOKIE": "refresh_token",
    "AUTH_COOKIE_HTTP_ONLY": True,
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=2),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
}

# -------------------------------
# üßµ Celery
# -------------------------------
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.environ.get(
    "CELERY_RESULT_BACKEND", "redis://localhost:6379/1"
)
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# -------------------------------
# ‚úÖ Output Debug Info
# -------------------------------
# print("üîß Django SETTINGS loaded:", file=sys.stderr)
# print(f"‚ñ∂Ô∏è Modo Producci√≥n: {IS_PRODUCTION}", file=sys.stderr)
# print(f"‚ñ∂Ô∏è DB ENGINE: {DATABASES['default']['ENGINE']}", file=sys.stderr)
# print(f"‚ñ∂Ô∏è DB HOST: {DATABASES['default'].get('HOST', 'local sqlite')}", file=sys.stderr)
